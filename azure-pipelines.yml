# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - master

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: GenerateTerraformVarsFile
    displayName: Generate tfvars file
    jobs:
      - job: GenerateTerraformVarsFile
        steps:
          - task: Bash@3
            displayName: Generate tfvars file
            env:
              SERVICE_PRINCIPAL_CLIENT_ID: $(servicePrincipalClientId)
              SERVICE_PRINCIPAL_CLIENT_SECRET: $(servicePrincipalClientSecret)
              DATADOG_API_KEY: $(datadogApiKey)
              DATADOG_APP_KEY: $(datadogAppKey)
            inputs:
              targetType: 'inline'
              script: |
                echo service_principal_client_id = \"$SERVICE_PRINCIPAL_CLIENT_ID\" >> terraform.tfvars
                echo service_principal_client_secret = \"$SERVICE_PRINCIPAL_CLIENT_SECRET\" >> terraform.tfvars
                echo datadog_api_key = \"DATADOG_API_KEY\" >> terraform.tfvars
                echo datadog_app_key = \"DATADOG_APP_KEY\" >> terraform.tfvars
          - publish: ./terraform.tfvars
            artifact: 'tfvars'
            displayName: Publish generated tfvars file
  - stage: ValidateAndPlan
    displayName: Validate and Plan
    jobs:
      - job: ValidateAndPlan
        steps:
          - task: TerraformTaskV1@0
            displayName: Init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: $(backendServiceAzureRM)
              backendAzureRmResourceGroupName: 'earth-azure-devops'
              backendAzureRmStorageAccountName: 'earthterraform'
              backendAzureRmContainerName: 'terraform'
              backendAzureRmKey: 'terraform.tfstate'
          - task: TerraformTaskV1@0
            displayName: Validate
            inputs:
              provider: 'azurerm'
              command: 'validate'
          - download: current
            artifact: 'tfvars'
            displayName: Download generated tfvars file
          - task: TerraformTaskV1@0
            displayName: Plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-out=tfplan -input=false -var-file=$(Pipeline.Workspace)/tfvars/terraform.tfvars'
              environmentServiceNameAzureRM: $(backendServiceAzureRM)
          - publish: ./
            artifact: 'terraform-archive'
            displayName: Publish Terraform archive
  - stage: Apply
    displayName: Apply
    jobs:
      - deployment: HostedVs2017
        environment: tryit-aks-datadog
      - job: Apply
        steps:
          - checkout: none
          - task: DownloadPipelineArtifact@2
            displayName: Download Terraform archive
            inputs:
              artifactName: 'terraform-archive'
              path: $(Build.SourcesDirectory)
          - task: Bash@3
            displayName: Grant read permission to terraform files
            inputs:
              targetType: 'inline'
              script: 'chmod -R 755 /home/vsts/work/1/s/.terraform/plugins/linux_amd64'
          - download: current
            artifact: 'tfvars'
            displayName: Download generated tfvars file
          - task: TerraformTaskV1@0
            displayName: Apply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: '-var-file=$(Pipeline.Workspace)/tfvars/terraform.tfvars'
              environmentServiceNameAzureRM: $(backendServiceAzureRM)
